---
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    # https://www.talos.dev/v1.7/kubernetes-guides/configuration/pod-security/
    pod-security.kubernetes.io/enforce: privileged
    vector.dev/exclude: "true"
---
apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: prometheus-community
  namespace: flux-system
spec:
  interval: 24h
  url: https://prometheus-community.github.io/helm-charts
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: prometheus
  namespace: monitoring
spec:
  interval: 30m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 69.4.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
      interval: 12h

  values:
    crds:
      enabled: true
      upgradeJob:
        enabled: true
        forceConflicts: true
    alertmanager:
      enabled: true
      alertmanagerSpec:
        alertmanagerConfigSelector:
          matchLabels:
            alertmanager: config
      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: le-prod
          gethomepage.dev/enabled: "true"
          gethomepage.dev/name: "Alertmanager"
          gethomepage.dev/group: "Observability"
          gethomepage.dev/pod-selector: "app.kubernetes.io/name=alertmanager"
        hosts:
          - ${alertmanagerIngressHost}
        path: /
        tls:
          - secretName: alertmanager-tls
            hosts:
            - ${alertmanagerIngressHost}
    prometheus:
      prometheusSpec:
        externalLabels:
          cluster: ${clusterName}
        serviceMonitorSelectorNilUsesHelmValues: false
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: zfs
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 5Gi
      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: le-prod
          gethomepage.dev/enabled: "true"
          gethomepage.dev/name: "Prometheus"
          gethomepage.dev/group: "Observability"
          gethomepage.dev/pod-selector: "app.kubernetes.io/name=prometheus"
        hosts:
          - ${prometheusIngressHost}
        path: /
        tls:
          - secretName: prometheus-tls
            hosts:
            - ${prometheusIngressHost}
    grafana:
      enabled: true
      sidecar:
        datasources:
          alertmanager:
            handleGrafanaManagedAlerts: true
      persistence:
        enabled: true
        size: 1Gi
      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: le-prod
          gethomepage.dev/enabled: "true"
          gethomepage.dev/name: "Grafana"
          gethomepage.dev/group: "Observability"
          gethomepage.dev/pod-selector: "app.kubernetes.io/name=grafana"
        hosts:
          - ${grafanaIngressHost}
        path: /
        tls:
          - secretName: grafana-tls
            hosts:
            - ${grafanaIngressHost}
